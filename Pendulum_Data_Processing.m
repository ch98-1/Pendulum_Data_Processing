#Copyright (c) 2017 Corwin Hansen#This will calculate the constant for the pendulum or the impulse bit of the #thruster from the thracked point in the video of the pendulum being #calibrated or fired and data about the video and pendulum#load required packagespkg load optim;#fundermental constants #get user inputs for initial basic calculationsFileNameS = input("Plese enter the filename with stationary pendulums data: ", "s"); #get filename with stationary pendulums dataFileName = input("Plese enter the filename with swinging pendulums data: ", "s"); #get filename with swinging pendulums dataWidth = input("Please enter the width of the video in meters: "); #get screen widthHeight = input("Please enter the height of the video in meters: "); #get screen heightLength = input("Please enter the length of the pendulum from the pivot to the tracked point in meters: "); #get pendulum length to markerTime = 1/input("Please enter the fps the original video was shot at: "); #get time between each frameMass = input("Please enter the mass of the pendulum in kilograms: "); #get mass of the pendulumMofI = input("Please enter the moment of inertia of the pendulum from the pivot in kilogram metre squared: "); #get moment of inertia of the pendumumSCofM = input("Please enter the center of mass of the pendulum from the pivot in meters: "); #get center of mass of the pendulum#basic angle calculationsMatrix = dlmread(FileName); #turn swinging pendulums file in to matrixDataX = Width*Matrix(:, 1); #get the X column of the swinging pendulums matrix as data in metersDataY = Height*Matrix(:, 2); #get the Y column of the swinging pendulums matrix as data in metersMatrixS = dlmread(FileName); #turn stationary pendulums file in to matrixMeanX = mean(Width*MatrixS(:, 1)); #get the avarage of X column of the stationary pendulums matrix in metersMeanY = mean(Height*MatrixS(:, 2)); #get the avarage of Y column of the stationary pendulums matrix in metersAngle = asin((DataX-MeanX)/Length); #calculate angle from length of pendulum, position of the pendulum, and lenth of the pendulum#time calculationsTimeRange = Time:Time:(rows(Angle)*Time); #calculate time range#calculate actual dataDataType = menu("Do you want to process the data for fireing, calibration, or just the angle", "Fireing", "Calibration", "Angle"); #ask if data is for firing or calibrationif(DataType == 1) #if  fireing was choosen  disp("Fireing Calculation has not been implimented yet"); #debugging message  Constant = input("Please enter the calibrated constant of the pendulum: "); #get pendulums constantelseif(DataType == 2) #if calibration was choosen  disp("Calibration caliculation has not been implemented yet"); #debugging messageelseif(DataType == 3) #if angle was choosen  Output = input("Please enter the desitnation file path: ", "s"); #get Destination file path    if(yes_or_no("Do you want the angle in degrees?") == 1) #angle is degrees    dlmwrite(Output, rad2deg(Angle)); #Write angle to file in degrees    if (yes_or_no("Do you want to plot the angle?") == 1) #ask if plot is wanted      plot(TimeRange, rad2deg(Angle)); #Plot angle in degrees      title ("Angle (in degrees) vs Time");  #title and axis label of the graph      xlabel ("Time (s)");      ylabel ("Angle (deg)");    endif      else #angle is radians    dlmwrite(Output, Angle); #Write angle to file     if (yes_or_no("Do you want to plot the angle?") == 1) #ask if plot is wanted      plot(TimeRange, Angle); #Plot angle       title ("Angle vs Time"); #title and axis label of the graph      xlabel ("Time (s)");      ylabel ("Angle (rad)");    endif  endif  else  disp("Something went terribly wrong"); #debugging messageendifinput("Calculation is finished. Press enter to quit"); #press enter to quit